name: Build & Inject Kernel into Ubuntu 22.04.2 Raspberry Pi Image

on:
  workflow_dispatch:
  workflow_call:

jobs:
  Download:
    runs-on: arc-runner-set
    permissions: write-all
    steps:
      - name: Install required packages
        run: |
          sudo apt update
          sudo apt install -y \
            wget xz-utils curl

      - name: Download Ubuntu 22.04.2 Raspberry Pi image
        run: |
          wget -O ubuntu-22.04.2-raspi.img.xz \
            https://cdimage.ubuntu.com/releases/24.04.2/release/ubuntu-24.04.2-preinstalled-server-arm64+raspi.img.xz
          unxz ubuntu-22.04.2-raspi.img.xz

      - name: Upload Raspberry Pi image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-raspi-image
          path: ubuntu-22.04.2-raspi.img

  Build:
    runs-on: arc-runner-set
    needs: Download
    permissions: write-all
    steps:
      - name: Install required packages
        run: |
          sudo apt update
          sudo apt install -y \
            qemu-user-static binfmt-support \
            kpartx mount unzip bc bison flex libssl-dev \
            make gcc-aarch64-linux-gnu u-boot-tools device-tree-compiler \
            rsync util-linux wget xz-utils git libguestfs-tools qemu-utils

      - name: Clone Linux Kernel v6.6.51
        run: |
          git clone --depth=1 --branch rpi-6.6.y https://github.com/raspberrypi/linux.git
          cd linux
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          make bcm2711_defconfig
          make -j$(nproc) Image modules dtbs

      - name: Install Kernel Modules
        run: |
          cd linux
          sudo make modules_install

      - name: Prepare kernel artifacts for upload
        run: |
          mkdir -p kernel-artifacts
          cp linux/arch/arm64/boot/Image kernel-artifacts/vmlinuz-6.6.51
          cp linux/arch/arm64/boot/dts/broadcom/*.dtb kernel-artifacts/
          cp -r linux/arch/arm64/boot/dts/broadcom/overlays kernel-artifacts/

      - name: Upload kernel build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: kernel-artifacts/

  Inject:
    runs-on: arc-runner-set
    needs: Build
    permissions: write-all
    steps:
      - name: Download Ubuntu Raspberry Pi image artifact
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-raspi-image
          path: ./image

      - name: Download kernel build artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-artifacts
          path: ./kernel-build-output

      - name: Install mtools
        run: sudo apt-get update && sudo apt-get install -y mtools

      - name: Get boot partition start sector and size
        id: partition_info
        run: |
          # List partitions of the image and extract info for partition 1 (boot)
          PART_INFO=$(fdisk -l ./image/ubuntu-22.04.2-raspi.img | grep "^./image/ubuntu-22.04.2-raspi.img1")
          # fallback if grep doesn't work, parse by partition number
          if [ -z "$PART_INFO" ]; then
            PART_INFO=$(fdisk -l ./image/ubuntu-22.04.2-raspi.img | grep " 1 ")
          fi
          echo "Partition info: $PART_INFO"
          # Extract start sector (2nd column) and sector count (4th column)
          START_SECTOR=$(echo $PART_INFO | awk '{print $2}')
          SECTORS=$(echo $PART_INFO | awk '{print $4}')
          echo "start_sector=$START_SECTOR" >> $GITHUB_OUTPUT
          echo "sectors=$SECTORS" >> $GITHUB_OUTPUT

      - name: Extract boot partition image
        run: |
          dd if=./image/ubuntu-22.04.2-raspi.img of=boot-partition.img bs=512 skip=${{ steps.partition_info.outputs.start_sector }} count=${{ steps.partition_info.outputs.sectors }}

      - name: Configure mtools to access boot partition image
        run: |
          echo "drive p: file=\"$(pwd)/boot-partition.img\" partition=0" > ~/.mtoolsrc

      - name: Copy custom kernel files to boot partition image
        run: |
          mcopy -i boot-partition.img ./kernel-build-output/vmlinuz-6.6.51 p:/
          # Optionally, copy initrd if exists:
          if [ -f ./kernel-build-output/initrd.img-6.6.51 ]; then
            mcopy -i boot-partition.img ./kernel-build-output/initrd.img-6.6.51 p:/
          fi

      - name: Update config.txt in boot partition
        run: |
          mcopy -i boot-partition.img p:/config.txt .
          grep -q '^kernel=vmlinuz-6.6.51$' config.txt || echo "kernel=vmlinuz-6.6.51" >> config.txt
          mcopy -i boot-partition.img config.txt p:/

      - name: Inject patched boot partition back into main image
        run: |
          dd if=boot-partition.img of=./image/ubuntu-22.04.2-raspi.img bs=512 seek=${{ steps.partition_info.outputs.start_sector }} count=${{ steps.partition_info.outputs.sectors }} conv=notrunc

      - name: Upload patched Raspberry Pi image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-rpi-patched.img
          path: ./image/ubuntu-22.04.2-raspi.img
